!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR        = $(CROSS_COMPILE)ar$/;"	m
AS	Makefile	/^AS        = $(CROSS_COMPILE)as$/;"	m
ASSOCIATED	Status.h	/^	ASSOCIATED,$/;"	e	enum:network_status
AUDIO	AudioController.h	/^typedef struct AUDIO$/;"	s
AUDIO_SETTING	AudioController.h	/^} AUDIO_SETTING;$/;"	t	typeref:struct:AUDIO
AudioController	AudioController.cpp	/^AudioController::AudioController()$/;"	f	class:AudioController
AudioController	AudioController.h	/^class AudioController : public HwController$/;"	c
BUTTON	ButtonController.h	/^typedef struct BUTTON$/;"	s
BUTTON	Watchdog.cpp	47;"	d	file:
BUTTON_POLLING_TIME	Variable.h	1;"	d
BUTTON_SETTING	ButtonController.h	/^} BUTTON_SETTING;$/;"	t	typeref:struct:BUTTON
ButtonController	ButtonController.cpp	/^ButtonController::ButtonController()$/;"	f	class:ButtonController
ButtonController	ButtonController.h	/^class ButtonController : public HwController$/;"	c
ButtonStatus	ButtonStatus.cpp	/^ButtonStatus::ButtonStatus():reset_button_status_pid(0)$/;"	f	class:ButtonStatus
ButtonStatus	ButtonStatus.h	/^class ButtonStatus : public SwStatus$/;"	c
CC	Makefile	/^CC        = $(CROSS_COMPILE)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS    = $(PLATFORM_CFLAGS) -Wall -W -D$(subst -,_,$(PJ_MODEL))$/;"	m
CPP	Makefile	/^CPP       = $(CROSS_COMPILE)gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS  = $(PLATFORM_CPPFLAGS) -D_REENTRANT -D_LINUX -I$(PREFIX)\/include -I$(PREFIX)\/include\/ahal\\$/;"	m
CROSS_COMPILE	Makefile	/^CROSS_COMPILE = $(PJ_TARGET)-$/;"	m
CXX	Makefile	/^CXX       = $(CROSS_COMPILE)g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS  = $(CFLAGS)$/;"	m
CheckStatus	Status.h	/^		virtual bool CheckStatus() {$/;"	f	class:NetworkStatus
CheckStatus	Status.h	/^		virtual bool CheckStatus() {$/;"	f	class:WpsStatus
CreateHandlerByStates	Watchdog.cpp	/^IPCHandler *Watchdog::CreateHandlerByStates()$/;"	f	class:Watchdog
CreateHwManager	HwManager.cpp	/^HwManager *HwManager::CreateHwManager()$/;"	f	class:HwManager
CreateStatesHolder	StatesHolder.cpp	/^StatesHolder *StatesHolder::CreateStatesHolder()$/;"	f	class:StatesHolder
D2N_offset	LightSensorStatus.h	/^	int D2N_offset;	 $/;"	m	struct:LIGHT_SENSOR_STATUS
DAEMON	Makefile	/^DAEMON = Watchdog$/;"	m
DAY_TO_NIGHT_SEC	LightSensorController.h	12;"	d
DAY_TO_NIGHT_SEC	LightSensorStatus.h	17;"	d
DEASSOCIATED	Status.h	/^	DEASSOCIATED,$/;"	e	enum:network_status
DEPENDS	Makefile	/^DEPENDS := $(DEPENDS:%.cpp=%.d)$/;"	m
DEPENDS	Makefile	/^DEPENDS := $(SRCS:%.c=%.d)$/;"	m
DoWps	WifiController.h	/^	AHAL_CST_BOOL DoWps;$/;"	m	struct:WIFI
ENTER_NORMAL_COUNT	Variable.h	6;"	d
ENTER_REBOOT_COUNT	Variable.h	7;"	d
ENTER_REPORT_COUNT	Variable.h	9;"	d
ENTER_RESET_COUNT	Variable.h	10;"	d
ENTER_STANDBY_COUNT	Variable.h	8;"	d
ENTER_TWT_COUNT	Variable.h	5;"	d
ENTER_WPS_COUNT	Variable.h	11;"	d
FAIL	Status.h	/^	FAIL,$/;"	e	enum:wps_status
FIRST_STAGE	NetworkStatus.h	/^	FIRST_STAGE,$/;"	e	enum:__anon6
GPIO_READ_FAIL_COUNT	Variable.h	13;"	d
GetMainHandlerState	PowerUpHandler.cpp	/^MAINSTATES PowerUpHandler::GetMainHandlerState()$/;"	f	class:PowerUpHandler
GetMainHandlerState	ResetHandler.cpp	/^MAINSTATES ResetHandler::GetMainHandlerState()$/;"	f	class:ResetHandler
GetMainStates	StatesHolder.cpp	/^MAINSTATES StatesHolder::GetMainStates()$/;"	f	class:StatesHolder
GetOldMainStates	StatesHolder.cpp	/^MAINSTATES StatesHolder::GetOldMainStates()$/;"	f	class:StatesHolder
GetStatus	Status.h	/^		virtual int GetStatus() {$/;"	f	class:NetworkStatus
GetStatus	Status.h	/^		virtual int GetStatus() {$/;"	f	class:WpsStatus
GoNextState	IPCHandler.cpp	/^bool IPCHandler::GoNextState()$/;"	f	class:IPCHandler
HwController	HwController.cpp	/^HwController::HwController()$/;"	f	class:HwController
HwController	HwController.h	/^class HwController$/;"	c
HwManager	HwManager.cpp	/^HwManager::HwManager()$/;"	f	class:HwManager
HwManager	HwManager.h	/^class HwManager$/;"	c
ICR	ICRController.h	/^typedef struct ICR$/;"	s
ICR	Watchdog.cpp	51;"	d	file:
ICRController	ICRController.cpp	/^ICRController::ICRController()$/;"	f	class:ICRController
ICRController	ICRController.h	/^class ICRController : public HwController$/;"	c
ICR_SETTING	ICRController.h	/^} ICR_SETTING;$/;"	t	typeref:struct:ICR
IDLE	Status.h	/^	IDLE = 0,$/;"	e	enum:wps_status
IPCHandler	IPCHandler.cpp	/^IPCHandler::IPCHandler():holder(NULL),hw_manager(NULL)$/;"	f	class:IPCHandler
IPCHandler	IPCHandler.h	/^class IPCHandler$/;"	c
IRLED	IRLEDController.h	/^typedef struct IRLED$/;"	s
IRLED	Watchdog.cpp	50;"	d	file:
IRLEDController	IRLEDController.cpp	/^IRLEDController::IRLEDController()$/;"	f	class:IRLEDController
IRLEDController	IRLEDController.h	/^class IRLEDController : public HwController$/;"	c
IRLED_ICR	LightSensorStatus.h	/^typedef struct IRLED_ICR {$/;"	s
IRLED_ICR_SETTING	LightSensorStatus.h	/^} IRLED_ICR_SETTING;$/;"	t	typeref:struct:IRLED_ICR
IRLED_SETTING	IRLEDController.h	/^} IRLED_SETTING;$/;"	t	typeref:struct:IRLED
IR_AUTO	LightSensorStatus.h	/^	IR_AUTO,		\/* By LightSensor to control IRLED\/ICR *\/$/;"	e	enum:__anon4
IR_LED_OFF	LightSensorStatus.h	/^	IR_LED_OFF,		\/* For Day Mode  *\/$/;"	e	enum:__anon5
IR_LED_ON	LightSensorStatus.h	/^	IR_LED_ON,		\/* For Night mode *\/$/;"	e	enum:__anon5
IR_LED_STATE	LightSensorStatus.h	/^} IR_LED_STATE;		$/;"	t	typeref:enum:__anon5
IR_LED_unknown	LightSensorStatus.h	/^	IR_LED_unknown, \/* Let's check once at least *\/$/;"	e	enum:__anon5
IR_MANUAL	LightSensorStatus.h	/^	IR_MANUAL,		\/* By MANUAL to control IRLED\/ICR *\/	$/;"	e	enum:__anon4
IR_MODE	LightSensorStatus.h	/^} IR_MODE;		$/;"	t	typeref:enum:__anon4
LD	Makefile	/^LD        = $(CROSS_COMPILE)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS   = $(PLATFORM_LDFLAGS) -s -Wl,-rpath-link=$(PJ_RPATH)$/;"	m
LDLIBS	Makefile	/^LDLIBS    = $(PLATFORM_LDLIBS) -lpthread -lcam -ltinydb -lsensor -lMulCast -lwlan -lusb-1.0 -lasound -lahal -laudio\\$/;"	m
LED	LEDController.h	/^typedef struct LED$/;"	s
LED	Watchdog.cpp	49;"	d	file:
LEDController	LEDController.cpp	/^LEDController::LEDController()$/;"	f	class:LEDController
LEDController	LEDController.h	/^class LEDController : public HwController$/;"	c
LEDStatus	LEDStatus.cpp	/^LEDStatus::LEDStatus():led_status_pid(0)$/;"	f	class:LEDStatus
LEDStatus	LEDStatus.h	/^class LEDStatus : public SwStatus$/;"	c
LED_SETTING	LEDController.h	/^} LED_SETTING;$/;"	t	typeref:struct:LED
LED_STATUS	LEDStatus.h	/^typedef struct LED_STATUS {$/;"	s
LED_STATUS_SETTING	LEDStatus.h	/^} LED_STATUS_SETTING;$/;"	t	typeref:struct:LED_STATUS
LIGHT_SENSOR	LightSensorController.h	/^typedef struct LIGHT_SENSOR$/;"	s
LIGHT_SENSOR	Watchdog.cpp	52;"	d	file:
LIGHT_SENSOR_SETTING	LightSensorController.h	/^} LIGHT_SENSOR_SETTING;$/;"	t	typeref:struct:LIGHT_SENSOR
LIGHT_SENSOR_SETTING_FROM_CAM	LightSensorStatus.h	/^typedef struct LIGHT_SENSOR_SETTING_FROM_CAM {$/;"	s
LIGHT_SENSOR_SETTING_FROM_CAM	LightSensorStatus.h	/^} LIGHT_SENSOR_SETTING_FROM_CAM;	\/* It should get settings from DB first *\/$/;"	t	typeref:struct:LIGHT_SENSOR_SETTING_FROM_CAM
LIGHT_SENSOR_STATUS	LightSensorStatus.h	/^typedef struct LIGHT_SENSOR_STATUS {$/;"	s
LIGHT_SENSOR_STATUS_SETTING	LightSensorStatus.h	/^} LIGHT_SENSOR_STATUS_SETTING;$/;"	t	typeref:struct:LIGHT_SENSOR_STATUS
LINK_IS_OFF	NetworkStatus.h	/^	LINK_IS_OFF,$/;"	e	enum:__anon7
LINK_IS_ON	NetworkStatus.h	/^	LINK_IS_ON,$/;"	e	enum:__anon7
LINK_STATE	NetworkStatus.h	/^} LINK_STATE;$/;"	t	typeref:enum:__anon7
LOADLIBES	Makefile	/^LOADLIBES = $(PLATFORM_LOADLIBES) -L$(PREFIX)\/lib$/;"	m
LightSensorController	LightSensorController.cpp	/^LightSensorController::LightSensorController()$/;"	f	class:LightSensorController
LightSensorController	LightSensorController.h	/^class LightSensorController : public HwController$/;"	c
LightSensorStatus	LightSensorStatus.cpp	/^LightSensorStatus::LightSensorStatus():light_sensor_status_pid(0)$/;"	f	class:LightSensorStatus
LightSensorStatus	LightSensorStatus.h	/^class LightSensorStatus : public SwStatus$/;"	c
MAINSTATES	StatesHolder.h	/^enum MAINSTATES {$/;"	g
MAINSTATES_COUNT	StatesHolder.h	/^	MAINSTATES_COUNT,$/;"	e	enum:MAINSTATES
MIN_threshold	LightSensorStatus.h	19;"	d
N2D_offset	LightSensorStatus.h	/^	int N2D_offset;	 $/;"	m	struct:LIGHT_SENSOR_STATUS
NETWORK_RESTART_TIMEOUT	Variable.h	16;"	d
NETWORK_STATUS	NetworkStatus.h	/^typedef struct NETWORK_STATUS {$/;"	s
NETWORK_STATUS	Status.h	/^} NETWORK_STATUS;$/;"	t	typeref:enum:network_status
NETWORK_STATUS_SETTING	NetworkStatus.h	/^} NETWORK_STATUS_SETTING;$/;"	t	typeref:struct:NETWORK_STATUS
NIGHT_TO_DAY_SEC	LightSensorController.h	13;"	d
NIGHT_TO_DAY_SEC	LightSensorStatus.h	18;"	d
NM	Makefile	/^NM        = $(CROSS_COMPILE)nm$/;"	m
NetworkStatus	NetworkStatus.cpp	/^NetworkStatus::NetworkStatus():network_status_pid(0)$/;"	f	class:NetworkStatus
NetworkStatus	NetworkStatus.h	/^class NetworkStatus : public SwStatus$/;"	c
NetworkStatus	Status.h	/^NetworkStatus::NetworkStatus()$/;"	f	class:NetworkStatus
NetworkStatus	Status.h	/^class NetworkStatus : public Status$/;"	c
OBJCOPY	Makefile	/^OBJCOPY   = $(CROSS_COMPILE)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP   = $(CROSS_COMPILE)objdump$/;"	m
OK	Status.h	/^	OK,$/;"	e	enum:wps_status
OPTIONS	Makefile	/^OPTIONS = $(SRCS) $(CPPFLAGS) $(LDLIBS)$/;"	m
PAIR	Status.h	/^	PAIR,$/;"	e	enum:wps_status
PLED_ACTIVE	LEDStatus.h	/^	PLED_ACTIVE,$/;"	e	enum:__anon2
PLED_AP_MODE	LEDStatus.h	/^	PLED_AP_MODE,$/;"	e	enum:__anon2
PLED_BOOTING	LEDStatus.h	/^	PLED_BOOTING,$/;"	e	enum:__anon2
PLED_BT_MODE	LEDStatus.h	/^	PLED_BT_MODE,$/;"	e	enum:__anon2
PLED_CLIENT_MODE	LEDStatus.h	/^	PLED_CLIENT_MODE,$/;"	e	enum:__anon2
PLED_DISASSOCIATED	LEDStatus.h	/^	PLED_DISASSOCIATED,$/;"	e	enum:__anon2
PLED_FWUPDATE	LEDStatus.h	/^	PLED_FWUPDATE,$/;"	e	enum:__anon2
PLED_RESET	LEDStatus.h	/^	PLED_RESET,$/;"	e	enum:__anon2
PLED_WPS	LEDStatus.h	/^	PLED_WPS,$/;"	e	enum:__anon2
POLLING_TIMEOUT	Variable.h	2;"	d
POWERUP	StatesHolder.h	/^	POWERUP,$/;"	e	enum:MAINSTATES
POWER_LED_STATE	LEDStatus.h	/^} POWER_LED_STATE;$/;"	t	typeref:enum:__anon2
PREFIX	Makefile	/^PREFIX = $(PJ_PREFIX)$/;"	m
PREFIX_SBINDIR	Makefile	/^PREFIX_SBINDIR := $(PREFIX)\/sbin$/;"	m
PWD_PERCENTAGE	IRLEDController.h	10;"	d
PowerUpHandler	PowerUpHandler.cpp	/^PowerUpHandler::PowerUpHandler()$/;"	f	class:PowerUpHandler
PowerUpHandler	PowerUpHandler.h	/^class PowerUpHandler : public IPCHandler$/;"	c
RANLIB	Makefile	/^RANLIB    = $(CROSS_COMPILE)ranlib$/;"	m
READELF	Makefile	/^READELF   = $(CROSS_COMPILE)readelf$/;"	m
RESET_BUTTON_STATE	ButtonStatus.h	/^} RESET_BUTTON_STATE;$/;"	t	typeref:enum:__anon1
RESET_LAUNCH	ButtonStatus.h	/^	RESET_LAUNCH,$/;"	e	enum:__anon1
RESET_READY	ButtonStatus.h	/^	RESET_READY,$/;"	e	enum:__anon1
RESET_STANDBY	ButtonStatus.h	/^	RESET_STANDBY,$/;"	e	enum:__anon1
RSSI_LB_DEF	NetworkStatus.h	19;"	d
RSSI_UB_DEF	NetworkStatus.h	18;"	d
ReleaseHwManager	HwManager.cpp	/^int HwManager::ReleaseHwManager()$/;"	f	class:HwManager
ReleaseStatesHolder	StatesHolder.cpp	/^int StatesHolder::ReleaseStatesHolder()$/;"	f	class:StatesHolder
ResetHandler	ResetHandler.cpp	/^ResetHandler::ResetHandler()$/;"	f	class:ResetHandler
ResetHandler	ResetHandler.h	/^class ResetHandler : public IPCHandler$/;"	c
ReturnHwControllerObjectByType	HwManager.cpp	/^HwController *HwManager::ReturnHwControllerObjectByType(const char* hw_controller_name)$/;"	f	class:HwManager
ReturnSwStatusObjectByType	StatesHolder.cpp	/^SwStatus *StatesHolder::ReturnSwStatusObjectByType(const char* sw_status_name)$/;"	f	class:StatesHolder
SCAN	Status.h	/^	SCAN,$/;"	e	enum:wps_status
SECOND_STAGE	NetworkStatus.h	/^	SECOND_STAGE,$/;"	e	enum:__anon6
SIGNAL_STAGE	NetworkStatus.h	/^} SIGNAL_STAGE;$/;"	t	typeref:enum:__anon6
SIZE	Makefile	/^SIZE      = $(CROSS_COMPILE)size$/;"	m
SRCS	Makefile	/^SRCS = $(DAEMON).cpp HwManager.cpp HwController.cpp StatesHolder.cpp SwStatus.cpp IPCHandler.cpp Common.cpp \\$/;"	m
STRINGS	Makefile	/^STRINGS   = $(CROSS_COMPILE)strings$/;"	m
STRIP	Makefile	/^STRIP     = $(CROSS_COMPILE)strip$/;"	m
SetMainStates	StatesHolder.cpp	/^void StatesHolder::SetMainStates(MAINSTATES s)$/;"	f	class:StatesHolder
StatesHolder	StatesHolder.cpp	/^StatesHolder::StatesHolder():mainStates(POWERUP),oldMainStates(POWERUP)$/;"	f	class:StatesHolder
StatesHolder	StatesHolder.h	/^class StatesHolder$/;"	c
Status	Status.h	/^Status::Status()$/;"	f	class:Status
Status	Status.h	/^class Status $/;"	c
SwStatus	SwStatus.cpp	/^SwStatus::SwStatus():hw_manager(HwManager::CreateHwManager())$/;"	f	class:SwStatus
SwStatus	SwStatus.h	/^class SwStatus$/;"	c
TARGETS	Makefile	/^TARGETS = $(DAEMON)$/;"	m
TIME_BASE	Variable.h	3;"	d
TIME_INTERVAL	LightSensorController.h	11;"	d
TIME_INTERVAL	LightSensorStatus.h	16;"	d
WAIT_CALL_OUT_COUNT	Variable.h	12;"	d
WAIT_CONNECT_TO_DEVICE	Variable.h	15;"	d
WAIT_HEART_BEAT_COUNT	Variable.h	4;"	d
WAIT_WPS_STATE_COUNT	Variable.h	14;"	d
WIFI	Watchdog.cpp	48;"	d	file:
WIFI	WifiController.h	/^typedef struct WIFI$/;"	s
WIFI_LED_STATE	LEDStatus.h	/^} WIFI_LED_STATE;$/;"	t	typeref:enum:__anon3
WIFI_SETTING	WifiController.h	/^} WIFI_SETTING;$/;"	t	typeref:struct:WIFI
WLED_NORMAL	LEDStatus.h	/^	WLED_NORMAL,$/;"	e	enum:__anon3
WLED_OFF	LEDStatus.h	/^	WLED_OFF,$/;"	e	enum:__anon3
WLED_STRONG	LEDStatus.h	/^	WLED_STRONG,$/;"	e	enum:__anon3
WLED_WEAK	LEDStatus.h	/^	WLED_WEAK,$/;"	e	enum:__anon3
WPS_PBC_SCAN_COUNT	Variable.h	17;"	d
WPS_STATUS	Status.h	/^} WPS_STATUS;$/;"	t	typeref:enum:wps_status
Watchdog	Watchdog.cpp	/^Watchdog::Watchdog():hw_manager(NULL),holder(NULL)$/;"	f	class:Watchdog
Watchdog	Watchdog.h	/^class Watchdog$/;"	c
WifiController	WifiController.cpp	/^WifiController::WifiController()$/;"	f	class:WifiController
WifiController	WifiController.h	/^class WifiController : public HwController$/;"	c
WpsStatus	Status.h	/^WpsStatus::WpsStatus()$/;"	f	class:WpsStatus
WpsStatus	Status.h	/^class WpsStatus : public Status$/;"	c
_AUDIOCONTROLLER_H_	AudioController.h	2;"	d
_BUTTONCONTROLLER_H_	ButtonController.h	2;"	d
_BUTTONSTATUS_H_	ButtonStatus.h	2;"	d
_COMMON_H_	Common.h	2;"	d
_HWCONTROLLER_H_	HwController.h	2;"	d
_HWMANAGER_H_	HwManager.h	2;"	d
_ICRCONTROLLER_H_	ICRController.h	2;"	d
_IPCHANDLER_H_	IPCHandler.h	2;"	d
_IRLEDCONTROLLER_H_	IRLEDController.h	2;"	d
_LEDCONTROLLER_H_	LEDController.h	2;"	d
_LEDStatus_H_	LEDStatus.h	2;"	d
_LIGHTSENSORCONTROLLER_H_	LightSensorController.h	2;"	d
_LIGHTSENSORSTATUS_H_	LightSensorStatus.h	2;"	d
_NETWORKSTATUS_H_	NetworkStatus.h	2;"	d
_POWERUPHANDLER_H_	PowerUpHandler.h	2;"	d
_RESETHANDLER_H_	ResetHandler.h	2;"	d
_STATESHOLDER_H_	StatesHolder.h	2;"	d
_SWSTATUS_H_	SwStatus.h	2;"	d
_WIFICONTROLLER_H_	WifiController.h	2;"	d
check_associate	PowerUpHandler.cpp	/^void PowerUpHandler::check_associate()$/;"	f	class:PowerUpHandler
check_link_state	NetworkStatus.cpp	/^int NetworkStatus::check_link_state()$/;"	f	class:NetworkStatus
color	LEDController.h	/^	AHAL_LED_COLOR color; $/;"	m	struct:LED
continue_status_detect	ButtonStatus.cpp	/^int ButtonStatus::continue_status_detect()$/;"	f	class:ButtonStatus
continue_status_detect	LEDStatus.cpp	/^int LEDStatus::continue_status_detect()$/;"	f	class:LEDStatus
continue_status_detect	LightSensorStatus.cpp	/^int LightSensorStatus::continue_status_detect()$/;"	f	class:LightSensorStatus
continue_status_detect	NetworkStatus.cpp	/^int NetworkStatus::continue_status_detect()$/;"	f	class:NetworkStatus
continue_status_detect_by_type	StatesHolder.cpp	/^int StatesHolder::continue_status_detect_by_type(const char* status_name)$/;"	f	class:StatesHolder
deinit	AudioController.cpp	/^int AudioController::deinit()$/;"	f	class:AudioController
deinit	ButtonController.cpp	/^int ButtonController::deinit()$/;"	f	class:ButtonController
deinit	ButtonStatus.cpp	/^int ButtonStatus::deinit()$/;"	f	class:ButtonStatus
deinit	HwManager.cpp	/^int HwManager::deinit()$/;"	f	class:HwManager
deinit	ICRController.cpp	/^int ICRController::deinit()$/;"	f	class:ICRController
deinit	IRLEDController.cpp	/^int IRLEDController::deinit()$/;"	f	class:IRLEDController
deinit	LEDController.cpp	/^int LEDController::deinit()$/;"	f	class:LEDController
deinit	LEDStatus.cpp	/^int LEDStatus::deinit()$/;"	f	class:LEDStatus
deinit	LightSensorController.cpp	/^int LightSensorController::deinit()$/;"	f	class:LightSensorController
deinit	LightSensorStatus.cpp	/^int LightSensorStatus::deinit()$/;"	f	class:LightSensorStatus
deinit	NetworkStatus.cpp	/^int NetworkStatus::deinit()$/;"	f	class:NetworkStatus
deinit	StatesHolder.cpp	/^int StatesHolder::deinit()$/;"	f	class:StatesHolder
deinit	Watchdog.cpp	/^int Watchdog::deinit()$/;"	f	class:Watchdog
deinit	WifiController.cpp	/^int WifiController::deinit()$/;"	f	class:WifiController
deinit_hw_info_by_type	HwManager.cpp	/^int HwManager::deinit_hw_info_by_type(const char* hw_name)$/;"	f	class:HwManager
deinit_status_detect_by_type	StatesHolder.cpp	/^int StatesHolder::deinit_status_detect_by_type(const char* status_name)$/;"	f	class:StatesHolder
diff_curr_uptime_count	Common.cpp	/^long diff_curr_uptime_count(struct timeval t)$/;"	f
do_wifi_wps	WifiController.cpp	/^int WifiController::do_wifi_wps(void *hw_struct)$/;"	f	class:WifiController
get_IR_MODE_by_cam_settings	LightSensorStatus.cpp	/^IR_LED_STATE LightSensorStatus::get_IR_MODE_by_cam_settings(LIGHT_SENSOR_SETTING_FROM_CAM light_sensor_setting_from_cam) $/;"	f	class:LightSensorStatus
get_hw_info	AudioController.cpp	/^int AudioController::get_hw_info(void *)$/;"	f	class:AudioController
get_hw_info	ButtonController.cpp	/^int ButtonController::get_hw_info(void *hw_struct)$/;"	f	class:ButtonController
get_hw_info	ICRController.cpp	/^int ICRController::get_hw_info(void *)$/;"	f	class:ICRController
get_hw_info	IRLEDController.cpp	/^int IRLEDController::get_hw_info(void *)$/;"	f	class:IRLEDController
get_hw_info	LEDController.cpp	/^int LEDController::get_hw_info(void *)$/;"	f	class:LEDController
get_hw_info	LightSensorController.cpp	/^int LightSensorController::get_hw_info(void *hw_struct)$/;"	f	class:LightSensorController
get_hw_info	WifiController.cpp	/^int WifiController::get_hw_info(void *hw_struct)$/;"	f	class:WifiController
get_hw_info_by_type	HwManager.cpp	/^int HwManager::get_hw_info_by_type(const char* hw_name, void* hw_struct)$/;"	f	class:HwManager
get_pause_detect_flag	ButtonStatus.cpp	/^bool ButtonStatus::get_pause_detect_flag()$/;"	f	class:ButtonStatus
get_pause_detect_flag	LEDStatus.cpp	/^bool LEDStatus::get_pause_detect_flag()$/;"	f	class:LEDStatus
get_pause_detect_flag	LightSensorStatus.cpp	/^bool LightSensorStatus::get_pause_detect_flag()$/;"	f	class:LightSensorStatus
get_pause_detect_flag	NetworkStatus.cpp	/^bool NetworkStatus::get_pause_detect_flag()$/;"	f	class:NetworkStatus
get_pause_detect_flag_by_type	StatesHolder.cpp	/^int StatesHolder::get_pause_detect_flag_by_type(const char* status_name)$/;"	f	class:StatesHolder
get_quit	Common.cpp	/^bool get_quit()$/;"	f
get_reload	Common.cpp	/^bool get_reload()$/;"	f
get_status_info	ButtonStatus.cpp	/^int ButtonStatus::get_status_info(void *)$/;"	f	class:ButtonStatus
get_status_info	LEDStatus.cpp	/^int LEDStatus::get_status_info(void* status_struct)$/;"	f	class:LEDStatus
get_status_info	LightSensorStatus.cpp	/^int LightSensorStatus::get_status_info(void *status_struct)$/;"	f	class:LightSensorStatus
get_status_info	NetworkStatus.cpp	/^int NetworkStatus::get_status_info(void * status_struct) $/;"	f	class:NetworkStatus
get_status_info_by_type	StatesHolder.cpp	/^int StatesHolder::get_status_info_by_type(const char* status_name, void* status_struct)$/;"	f	class:StatesHolder
get_uptime	Common.cpp	/^struct timeval get_uptime()$/;"	f
get_wifi_associated_status	WifiController.cpp	/^int WifiController::get_wifi_associated_status(void *hw_struct)$/;"	f	class:WifiController
get_wifi_radio_status	WifiController.cpp	/^int WifiController::get_wifi_radio_status(void *hw_struct)$/;"	f	class:WifiController
get_wifi_wps_status	WifiController.cpp	/^int WifiController::get_wifi_wps_status(void *hw_struct) $/;"	f	class:WifiController
handle_associated	IPCHandler.cpp	/^int IPCHandler::handle_associated() $/;"	f	class:IPCHandler
handle_day_mode	IPCHandler.cpp	/^int IPCHandler::handle_day_mode()$/;"	f	class:IPCHandler
handle_deassociated	IPCHandler.cpp	/^int IPCHandler::handle_deassociated()$/;"	f	class:IPCHandler
handle_detect_factory_button	IPCHandler.cpp	/^int IPCHandler::handle_detect_factory_button()$/;"	f	class:IPCHandler
handle_factory_reset	IPCHandler.cpp	/^int IPCHandler::handle_factory_reset()$/;"	f	class:IPCHandler
handle_ipc_depend_on_status	PowerUpHandler.cpp	/^int PowerUpHandler::handle_ipc_depend_on_status(IpcCommand cmd)$/;"	f	class:PowerUpHandler
handle_ipc_depend_on_status	ResetHandler.cpp	/^int ResetHandler::handle_ipc_depend_on_status(IpcCommand \/*cmd*\/)$/;"	f	class:ResetHandler
handle_night_mode	IPCHandler.cpp	/^int IPCHandler::handle_night_mode()$/;"	f	class:IPCHandler
handle_set_ir_mode_auto	IPCHandler.cpp	/^int IPCHandler::handle_set_ir_mode_auto()$/;"	f	class:IPCHandler
handle_set_ir_mode_off	IPCHandler.cpp	/^int IPCHandler::handle_set_ir_mode_off()$/;"	f	class:IPCHandler
handle_set_ir_mode_on	IPCHandler.cpp	/^int IPCHandler::handle_set_ir_mode_on()$/;"	f	class:IPCHandler
handle_stream_count	IPCHandler.cpp	/^int IPCHandler::handle_stream_count(bool isActive)$/;"	f	class:IPCHandler
handler_firmware_upgrade	IPCHandler.cpp	/^int IPCHandler::handler_firmware_upgrade()$/;"	f	class:IPCHandler
holder	IPCHandler.h	/^	StatesHolder *holder;$/;"	m	class:IPCHandler
holder	StatesHolder.h	/^		static StatesHolder *holder;$/;"	m	class:StatesHolder
holder	Watchdog.h	/^		StatesHolder *holder;$/;"	m	class:Watchdog
hw_manager	HwManager.h	/^		static HwManager *hw_manager;$/;"	m	class:HwManager
hw_manager	IPCHandler.h	/^	HwManager *hw_manager;$/;"	m	class:IPCHandler
hw_manager	SwStatus.h	/^		HwManager *hw_manager;$/;"	m	class:SwStatus
hw_manager	Watchdog.h	/^		HwManager *hw_manager;$/;"	m	class:Watchdog
icr_setting	LightSensorStatus.h	/^	ICR_SETTING icr_setting;$/;"	m	struct:IRLED_ICR
id	ButtonController.h	/^	AHAL_BTN_ID id;$/;"	m	struct:BUTTON
id	IRLEDController.h	/^	AHAL_PWM_ID id;$/;"	m	struct:IRLED
id	LEDController.h	/^	AHAL_LED_ID id;$/;"	m	struct:LED
init	AudioController.cpp	/^int AudioController::init()$/;"	f	class:AudioController
init	ButtonController.cpp	/^int ButtonController::init()$/;"	f	class:ButtonController
init	ButtonStatus.cpp	/^int ButtonStatus::init()$/;"	f	class:ButtonStatus
init	HwManager.cpp	/^int HwManager::init()$/;"	f	class:HwManager
init	ICRController.cpp	/^int ICRController::init()$/;"	f	class:ICRController
init	IPCHandler.cpp	/^int IPCHandler::init()$/;"	f	class:IPCHandler
init	IRLEDController.cpp	/^int IRLEDController::init()$/;"	f	class:IRLEDController
init	LEDController.cpp	/^int LEDController::init()$/;"	f	class:LEDController
init	LEDStatus.cpp	/^int LEDStatus::init()$/;"	f	class:LEDStatus
init	LightSensorController.cpp	/^int LightSensorController::init()$/;"	f	class:LightSensorController
init	LightSensorStatus.cpp	/^int LightSensorStatus::init()$/;"	f	class:LightSensorStatus
init	NetworkStatus.cpp	/^int NetworkStatus::init()$/;"	f	class:NetworkStatus
init	PowerUpHandler.cpp	/^int PowerUpHandler::init()$/;"	f	class:PowerUpHandler
init	ResetHandler.cpp	/^int ResetHandler::init()$/;"	f	class:ResetHandler
init	StatesHolder.cpp	/^int StatesHolder::init()$/;"	f	class:StatesHolder
init	Watchdog.cpp	/^int Watchdog::init()$/;"	f	class:Watchdog
init	WifiController.cpp	/^int WifiController::init()$/;"	f	class:WifiController
initSignal	Watchdog.cpp	/^bool initSignal()$/;"	f
init_hw_info_by_type	HwManager.cpp	/^int HwManager::init_hw_info_by_type(const char* hw_name)$/;"	f	class:HwManager
init_status_detect_by_type	StatesHolder.cpp	/^int StatesHolder::init_status_detect_by_type(const char* status_name)$/;"	f	class:StatesHolder
ipc_daemon	IPCHandler.h	/^	IpcDaemon ipc_daemon;$/;"	m	class:IPCHandler
ipc_fd	IPCHandler.h	/^	int ipc_fd;$/;"	m	class:IPCHandler
ir_led_state	LightSensorStatus.h	/^	IR_LED_STATE ir_led_state;$/;"	m	struct:LIGHT_SENSOR_STATUS
ir_mode	LightSensorStatus.h	/^	IR_MODE ir_mode;$/;"	m	struct:LIGHT_SENSOR_STATUS
ir_set	LightSensorStatus.h	/^	ir_setting ir_set;$/;"	m	struct:LIGHT_SENSOR_SETTING_FROM_CAM
irled_setting	LightSensorStatus.h	/^	IRLED_SETTING irled_setting;$/;"	m	struct:IRLED_ICR
isAssociated	WifiController.h	/^	AHAL_CST_BOOL isAssociated;$/;"	m	struct:WIFI
isPauseDetect	ButtonStatus.cpp	/^bool ButtonStatus::isPauseDetect = false;$/;"	m	class:ButtonStatus	file:
isPauseDetect	ButtonStatus.h	/^		static bool isPauseDetect;$/;"	m	class:ButtonStatus
isPauseDetect	LEDStatus.cpp	/^bool LEDStatus::isPauseDetect = false;$/;"	m	class:LEDStatus	file:
isPauseDetect	LEDStatus.h	/^		static bool isPauseDetect;$/;"	m	class:LEDStatus
isPauseDetect	LightSensorStatus.cpp	/^bool LightSensorStatus::isPauseDetect = false;$/;"	m	class:LightSensorStatus	file:
isPauseDetect	LightSensorStatus.h	/^		static bool isPauseDetect;$/;"	m	class:LightSensorStatus
isPauseDetect	NetworkStatus.cpp	/^bool NetworkStatus::isPauseDetect = false;$/;"	m	class:NetworkStatus	file:
isPauseDetect	NetworkStatus.h	/^		static bool isPauseDetect;$/;"	m	class:NetworkStatus
is_quit	Common.cpp	/^bool is_quit = false;$/;"	v
is_reload	Common.cpp	/^bool is_reload = false;$/;"	v
led_status_pid	LEDStatus.h	/^		pthread_t led_status_pid;$/;"	m	class:LEDStatus
light_sensor_status_pid	LightSensorStatus.h	/^		pthread_t light_sensor_status_pid;$/;"	m	class:LightSensorStatus
lightsensor_set	LightSensorStatus.h	/^	lightsensor_setting lightsensor_set;$/;"	m	struct:LIGHT_SENSOR_SETTING_FROM_CAM
link_state	NetworkStatus.h	/^	LINK_STATE link_state;$/;"	m	struct:NETWORK_STATUS
main	Watchdog.cpp	/^int main(int \/*argc*\/, const char* argv[])$/;"	f
mainStates	StatesHolder.h	/^		MAINSTATES mainStates;$/;"	m	class:StatesHolder
map_hw_controller	HwManager.h	/^		map<string, HwController *> map_hw_controller;$/;"	m	class:HwManager
map_sw_status	StatesHolder.h	/^		map<string, SwStatus *> map_sw_status;$/;"	m	class:StatesHolder
network_status	Status.h	/^typedef enum network_status {$/;"	g
network_status_pid	NetworkStatus.h	/^		pthread_t network_status_pid;$/;"	m	class:NetworkStatus
oldMainStates	StatesHolder.h	/^		MAINSTATES oldMainStates;$/;"	m	class:StatesHolder
old_ir_led_state	LightSensorStatus.h	/^	IR_LED_STATE old_ir_led_state;$/;"	m	struct:LIGHT_SENSOR_STATUS
pause_status_detect	ButtonStatus.cpp	/^int ButtonStatus::pause_status_detect() $/;"	f	class:ButtonStatus
pause_status_detect	LEDStatus.cpp	/^int LEDStatus::pause_status_detect() $/;"	f	class:LEDStatus
pause_status_detect	LightSensorStatus.cpp	/^int LightSensorStatus::pause_status_detect() $/;"	f	class:LightSensorStatus
pause_status_detect	NetworkStatus.cpp	/^int NetworkStatus::pause_status_detect() $/;"	f	class:NetworkStatus
pause_status_detect_by_type	StatesHolder.cpp	/^int StatesHolder::pause_status_detect_by_type(const char* status_name)$/;"	f	class:StatesHolder
pled_state	LEDStatus.h	/^	POWER_LED_STATE pled_state;$/;"	m	struct:LED_STATUS
referCount	HwManager.cpp	/^int HwManager::referCount = 0;$/;"	m	class:HwManager	file:
referCount	HwManager.h	/^		static int referCount;$/;"	m	class:HwManager
referCount	StatesHolder.cpp	/^int StatesHolder::referCount = 0;$/;"	m	class:StatesHolder	file:
referCount	StatesHolder.h	/^		static int referCount;$/;"	m	class:StatesHolder
release	IPCHandler.cpp	/^int IPCHandler::release()$/;"	f	class:IPCHandler
release	PowerUpHandler.cpp	/^int PowerUpHandler::release()$/;"	f	class:PowerUpHandler
release	ResetHandler.cpp	/^int ResetHandler::release()$/;"	f	class:ResetHandler
requestExitHandler	Watchdog.cpp	/^void requestExitHandler(int sigNum)$/;"	f
requestReloadHandler	Watchdog.cpp	/^void requestReloadHandler(int sigNum)$/;"	f
reset_button_status_pid	ButtonStatus.h	/^		pthread_t reset_button_status_pid;$/;"	m	class:ButtonStatus
return_button_state_by_press_count	ButtonStatus.cpp	/^RESET_BUTTON_STATE ButtonStatus::return_button_state_by_press_count(int press_count)$/;"	f	class:ButtonStatus
return_wled_state_by_rssi	NetworkStatus.cpp	/^WIFI_LED_STATE NetworkStatus::return_wled_state_by_rssi(int rssi, SIGNAL_STAGE signal_stage)$/;"	f	class:NetworkStatus
return_wled_state_from_first_stage	NetworkStatus.cpp	/^WIFI_LED_STATE NetworkStatus::return_wled_state_from_first_stage(int rssi)$/;"	f	class:NetworkStatus
return_wled_state_from_second_stage	NetworkStatus.cpp	/^WIFI_LED_STATE NetworkStatus::return_wled_state_from_second_stage(int rssi, bool isReset)$/;"	f	class:NetworkStatus
run	Watchdog.cpp	/^int Watchdog::run()$/;"	f	class:Watchdog
run_led_status_thread	LEDStatus.cpp	/^void *LEDStatus::run_led_status_thread(void *args)$/;"	f	class:LEDStatus
run_light_sensor_status_detect_thread	LightSensorStatus.cpp	/^void *LightSensorStatus::run_light_sensor_status_detect_thread(void *args)$/;"	f	class:LightSensorStatus
run_network_status_thread	NetworkStatus.cpp	/^void *NetworkStatus::run_network_status_thread(void *args)$/;"	f	class:NetworkStatus
run_parsing_command	IPCHandler.cpp	/^int IPCHandler::run_parsing_command()$/;"	f	class:IPCHandler
run_reset_button_status_detect_thread	ButtonStatus.cpp	/^void *ButtonStatus::run_reset_button_status_detect_thread(void *args)$/;"	f	class:ButtonStatus
run_status_detect	ButtonStatus.cpp	/^int ButtonStatus::run_status_detect()$/;"	f	class:ButtonStatus
run_status_detect	LEDStatus.cpp	/^int LEDStatus::run_status_detect()$/;"	f	class:LEDStatus
run_status_detect	LightSensorStatus.cpp	/^int LightSensorStatus::run_status_detect()$/;"	f	class:LightSensorStatus
run_status_detect	NetworkStatus.cpp	/^int NetworkStatus::run_status_detect()$/;"	f	class:NetworkStatus
run_status_detect_by_type	StatesHolder.cpp	/^int StatesHolder::run_status_detect_by_type(const char* status_name)$/;"	f	class:StatesHolder
s_led_status_setting	LEDStatus.h	/^		static LED_STATUS_SETTING s_led_status_setting;$/;"	m	class:LEDStatus
s_light_sensor_status_setting	LightSensorStatus.h	/^		static LIGHT_SENSOR_STATUS_SETTING s_light_sensor_status_setting;$/;"	m	class:LightSensorStatus
s_network_status_setting	NetworkStatus.h	/^		static NETWORK_STATUS_SETTING s_network_status_setting;$/;"	m	class:NetworkStatus
send_ipccmd	Common.cpp	/^void send_ipccmd(const char *path, int ipc)$/;"	f
set_hw_info	AudioController.cpp	/^int AudioController::set_hw_info(void *) $/;"	f	class:AudioController
set_hw_info	ButtonController.cpp	/^int ButtonController::set_hw_info(void *) $/;"	f	class:ButtonController
set_hw_info	ICRController.cpp	/^int ICRController::set_hw_info(void *hw_struct) $/;"	f	class:ICRController
set_hw_info	IRLEDController.cpp	/^int IRLEDController::set_hw_info(void *hw_struct) $/;"	f	class:IRLEDController
set_hw_info	LEDController.cpp	/^int LEDController::set_hw_info(void *hw_struct) $/;"	f	class:LEDController
set_hw_info	LightSensorController.cpp	/^int LightSensorController::set_hw_info(void *) $/;"	f	class:LightSensorController
set_hw_info	WifiController.cpp	/^int WifiController::set_hw_info(void *hw_struct) $/;"	f	class:WifiController
set_hw_info_by_type	HwManager.cpp	/^int HwManager::set_hw_info_by_type(const char* hw_name, void* hw_struct)$/;"	f	class:HwManager
set_ir_icr_behavior_by_state	LightSensorStatus.cpp	/^int LightSensorStatus::set_ir_icr_behavior_by_state(IR_LED_STATE ir_led_state) $/;"	f	class:LightSensorStatus
set_pled_status_by_state	LEDStatus.cpp	/^int LEDStatus::set_pled_status_by_state(POWER_LED_STATE pled_state, LED_SETTING *led_setting)$/;"	f	class:LEDStatus
set_quit	Common.cpp	/^void set_quit(bool b)$/;"	f
set_reload	Common.cpp	/^void set_reload(bool b)$/;"	f
set_status_info	ButtonStatus.cpp	/^int ButtonStatus::set_status_info(void *) $/;"	f	class:ButtonStatus
set_status_info	LEDStatus.cpp	/^int LEDStatus::set_status_info(void* status_struct) $/;"	f	class:LEDStatus
set_status_info	LightSensorStatus.cpp	/^int LightSensorStatus::set_status_info(void *status_struct)$/;"	f	class:LightSensorStatus
set_status_info	NetworkStatus.cpp	/^int NetworkStatus::set_status_info(void *) $/;"	f	class:NetworkStatus
set_status_info_by_type	StatesHolder.cpp	/^int StatesHolder::set_status_info_by_type(const char* status_name, void* status_struct)$/;"	f	class:StatesHolder
set_wled_status_by_state	LEDStatus.cpp	/^int LEDStatus::set_wled_status_by_state(WIFI_LED_STATE wled_state, LED_SETTING *led_setting)$/;"	f	class:LEDStatus
standard_deviation	NetworkStatus.cpp	/^void NetworkStatus::standard_deviation(float data[], unsigned int t, float *mu, float *sigma)$/;"	f	class:NetworkStatus
start_thread	Common.cpp	/^int start_thread(void *callback, pthread_t & pid, void *pass)$/;"	f
start_thread_join	Common.cpp	/^int start_thread_join(void *callback, pthread_t & pid, void *pass)$/;"	f
state	ICRController.h	/^	AHAL_CST_STATE state;$/;"	m	struct:ICR
status	ButtonController.h	/^	AHAL_BTN_STATUS status;$/;"	m	struct:BUTTON
status	Status.h	/^		int status;$/;"	m	class:Status
threshold	LightSensorStatus.h	/^	int threshold;$/;"	m	struct:LIGHT_SENSOR_STATUS
value	AudioController.h	/^	AHAL_INT32 value;$/;"	m	struct:AUDIO
value	IRLEDController.h	/^	AHAL_INT32 value;$/;"	m	struct:IRLED
value	LightSensorController.h	/^	AHAL_INT32 value;$/;"	m	struct:LIGHT_SENSOR
value_type	IRLEDController.h	/^	AHAL_PWM_VALUE_TYPE value_type; $/;"	m	struct:IRLED
wifi_radio_info	WifiController.h	/^	AHAL_WIFI_RADIO_INFO wifi_radio_info;$/;"	m	struct:WIFI
wifi_wps_status	WifiController.h	/^	AHAL_WIFI_WPS_STATUS wifi_wps_status;$/;"	m	struct:WIFI
wled_state	LEDStatus.h	/^	WIFI_LED_STATE wled_state;$/;"	m	struct:LED_STATUS
wps_status	Status.h	/^typedef enum wps_status {$/;"	g
~AudioController	AudioController.cpp	/^AudioController::~AudioController()$/;"	f	class:AudioController
~ButtonController	ButtonController.cpp	/^ButtonController::~ButtonController()$/;"	f	class:ButtonController
~ButtonStatus	ButtonStatus.cpp	/^ButtonStatus::~ButtonStatus()$/;"	f	class:ButtonStatus
~HwController	HwController.cpp	/^HwController::~HwController()$/;"	f	class:HwController
~HwManager	HwManager.cpp	/^HwManager::~HwManager()$/;"	f	class:HwManager
~ICRController	ICRController.cpp	/^ICRController::~ICRController()$/;"	f	class:ICRController
~IPCHandler	IPCHandler.cpp	/^IPCHandler::~IPCHandler()$/;"	f	class:IPCHandler
~IRLEDController	IRLEDController.cpp	/^IRLEDController::~IRLEDController()$/;"	f	class:IRLEDController
~LEDController	LEDController.cpp	/^LEDController::~LEDController()$/;"	f	class:LEDController
~LEDStatus	LEDStatus.cpp	/^LEDStatus::~LEDStatus()$/;"	f	class:LEDStatus
~LightSensorController	LightSensorController.cpp	/^LightSensorController::~LightSensorController()$/;"	f	class:LightSensorController
~LightSensorStatus	LightSensorStatus.cpp	/^LightSensorStatus::~LightSensorStatus()$/;"	f	class:LightSensorStatus
~NetworkStatus	NetworkStatus.cpp	/^NetworkStatus::~NetworkStatus()$/;"	f	class:NetworkStatus
~NetworkStatus	Status.h	/^NetworkStatus::~NetworkStatus()$/;"	f	class:NetworkStatus
~PowerUpHandler	PowerUpHandler.cpp	/^PowerUpHandler::~PowerUpHandler()$/;"	f	class:PowerUpHandler
~ResetHandler	ResetHandler.cpp	/^ResetHandler::~ResetHandler()$/;"	f	class:ResetHandler
~StatesHolder	StatesHolder.cpp	/^StatesHolder::~StatesHolder()$/;"	f	class:StatesHolder
~Status	Status.h	/^Status::~Status()$/;"	f	class:Status
~SwStatus	SwStatus.cpp	/^SwStatus::~SwStatus()$/;"	f	class:SwStatus
~Watchdog	Watchdog.cpp	/^Watchdog::~Watchdog()$/;"	f	class:Watchdog
~WifiController	WifiController.cpp	/^WifiController::~WifiController()$/;"	f	class:WifiController
~WpsStatus	Status.h	/^WpsStatus::~WpsStatus()$/;"	f	class:WpsStatus
